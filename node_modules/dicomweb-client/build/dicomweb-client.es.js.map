{"version":3,"file":"dicomweb-client.es.js","sources":["../src/message.js","../src/api.js","../src/utils.js","../src/version.js","../src/dicomweb-client.js"],"sourcesContent":["/**\n * Converts a Uint8Array to a String.\n * @param {Uint8Array} array that should be converted\n * @param {Number} offset array offset in case only subset of array items should be extracted (default: 0)\n * @param {Number} limit maximum number of array items that should be extracted (defaults to length of array)\n * @returns {String}\n */\nfunction uint8ArrayToString(arr, offset, limit) {\n  offset = offset || 0;\n  limit = limit || arr.length - offset;\n  let str = '';\n  for (let i = offset; i < offset + limit; i++) {\n    str += String.fromCharCode(arr[i]);\n  }\n  return str;\n}\n\n\n/**\n * Converts a String to a Uint8Array.\n * @param {String} str string that should be converted\n * @returns {Uint8Array}\n */\nfunction stringToUint8Array(str) {\n  const arr = new Uint8Array(str.length);\n  for (let i = 0, j = str.length; i < j; i++) {\n    arr[i] = str.charCodeAt(i);\n  }\n  return arr;\n}\n\n\n/**\n * Identifies the boundary in a multipart/related message header.\n * @param {String} header message header\n * @returns {String} boundary\n */\nfunction identifyBoundary(header) {\n  const parts = header.split('\\r\\n');\n\n  for (let i = 0; i < parts.length; i++) {\n    if (parts[i].substr(0, 2) === '--') {\n      return parts[i];\n    }\n  }\n}\n\n\n/**\n * Checks whether a given token is contained by a message at a given offset.\n * @param {Uint8Array} message message content\n * @param {Uint8Array} token substring that should be present\n * @param {Number} offset offset in message content from where search should start\n * @returns {Boolean} whether message contains token at offset\n */\nfunction containsToken(message, token, offset=0) {\n  if (offset + token.length > message.length) {\n    return false;\n  }\n\n  let index = offset;\n  for (let i = 0; i < token.length; i++) {\n    if (token[i] !== message[index++]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\n/**\n * Finds a given token in a message at a given offset.\n * @param {Uint8Array} message message content\n * @param {Uint8Array} token substring that should be found\n * @param {String} offset message body offset from where search should start\n * @returns {Boolean} whether message has a part at given offset or not\n */\nfunction findToken(message, token, offset=0, maxSearchLength) {\n  let searchLength = message.length;\n  if (maxSearchLength) {\n    searchLength = Math.min(offset + maxSearchLength, message.length);\n  }\n\n  for (let i = offset; i < searchLength; i++) {\n    // If the first value of the message matches\n    // the first value of the token, check if\n    // this is the full token.\n    if (message[i] === token[0]) {\n      if (containsToken(message, token, i)) {\n        return i;\n      }\n    }\n  }\n\n  return -1;\n}\n\n/**\n * @typedef {Object} MultipartEncodedData\n * @property {ArrayBuffer} data The encoded Multipart Data\n * @property {String} boundary The boundary used to divide pieces of the encoded data\n */\n\n/**\n * Encode one or more DICOM datasets into a single body so it can be\n * sent using the Multipart Content-Type.\n *\n * @param {ArrayBuffer[]} datasets Array containing each file to be encoded in the multipart body, passed as ArrayBuffers.\n * @param {String} [boundary] Optional string to define a boundary between each part of the multipart body. If this is not specified, a random GUID will be generated.\n * @return {MultipartEncodedData} The Multipart encoded data returned as an Object. This contains both the data itself, and the boundary string used to divide it.\n */\nfunction multipartEncode(datasets, boundary=guid(), contentType='application/dicom') {\n  const contentTypeString = `Content-Type: ${contentType}`;\n  const header = `\\r\\n--${boundary}\\r\\n${contentTypeString}\\r\\n\\r\\n`;\n  const footer = `\\r\\n--${boundary}--`;\n  const headerArray = stringToUint8Array(header);\n  const footerArray = stringToUint8Array(footer);\n  const headerLength = headerArray.length;\n  const footerLength = footerArray.length;\n\n  let length = 0;\n\n  // Calculate the total length for the final array\n  const contentArrays = datasets.map(datasetBuffer => {\n    const contentArray = new Uint8Array(datasetBuffer);\n    const contentLength = contentArray.length;\n\n    length += headerLength + contentLength + footerLength;\n\n    return contentArray;\n  })\n\n  // Allocate the array\n  const multipartArray = new Uint8Array(length);\n\n  // Set the initial header\n  multipartArray.set(headerArray, 0);\n\n  // Write each dataset into the multipart array\n  let position = 0;\n  contentArrays.forEach(contentArray => {\n    const contentLength = contentArray.length;\n\n    multipartArray.set(headerArray, position);\n    multipartArray.set(contentArray, position + headerLength);\n\n    position += headerLength + contentArray.length;\n  });\n\n  multipartArray.set(footerArray, position);\n\n  return {\n    data: multipartArray.buffer,\n    boundary\n  };\n};\n\n/**\n * Decode a Multipart encoded ArrayBuffer and return the components as an Array.\n *\n * @param {ArrayBuffer} response Data encoded as a 'multipart/related' message\n * @returns {Array} The content\n */\nfunction multipartDecode(response) {\n    const message = new Uint8Array(response);\n\n    /* Set a maximum length to search for the header boundaries, otherwise\n       findToken can run for a long time\n    */\n    const maxSearchLength = 1000;\n\n\n    // First look for the multipart mime header\n    let separator = stringToUint8Array('\\r\\n\\r\\n');\n    let headerIndex = findToken(message, separator, 0, maxSearchLength);\n    if (headerIndex === -1) {\n      throw new Error('Response message has no multipart mime header');\n    }\n\n    const header = uint8ArrayToString(message, 0, headerIndex);\n    const boundaryString = identifyBoundary(header);\n    if (!boundaryString) {\n      throw new Error('Header of response message does not specify boundary');\n    }\n\n    const boundary = stringToUint8Array(boundaryString);\n    const boundaryLength = boundary.length;\n    const components = [];\n\n    let offset = boundaryLength;\n\n    // Loop until we cannot find any more boundaries\n    let boundaryIndex;\n    \n    while (boundaryIndex !== -1) {\n      // Search for the next boundary in the message, starting\n      // from the current offset position\n      boundaryIndex = findToken(message, boundary, offset);\n\n      // If no further boundaries are found, stop here.\n      if (boundaryIndex === -1) {\n        break;\n      }\n\n      let headerIndex = findToken(message, separator, offset, maxSearchLength);\n      if (headerIndex === -1) {\n        throw new Error('Response message part has no mime header');\n      }\n      offset = headerIndex + separator.length;\n\n      // Extract data from response message, excluding \"\\r\\n\"\n      const spacingLength = 2;\n      const data = response.slice(offset, boundaryIndex - spacingLength);\n\n      // Add the data to the array of results\n      components.push(data);\n\n      // Move the offset to the end of the current section,\n      // plus the identified boundary\n      offset = boundaryIndex + boundaryLength;\n    }\n\n    return components;\n}\n\n/**\n * Create a random GUID\n *\n * @return {string}\n */\nfunction guid() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n}\n\nexport {\n  containsToken,\n  findToken,\n  identifyBoundary,\n  uint8ArrayToString,\n  stringToUint8Array,\n  multipartEncode,\n  multipartDecode,\n  guid,\n};\n","import {\n  containsToken,\n  findToken,\n  identifyBoundary,\n  uint8ArrayToString,\n  stringToUint8Array,\n  multipartEncode,\n  multipartDecode\n} from './message.js';\n\nfunction isEmptyObject (obj) {\n    return Object.keys(obj).length === 0 && obj.constructor === Object;\n}\n\nconst getFirstResult = result => result[0];\n\nconst MIMETYPES = {\n  DICOM: 'application/dicom',\n  DICOM_JSON: 'application/dicom+json',\n  OCTET_STREAM: 'application/octet-stream',\n  JPEG: 'image/jpeg',\n  PNG: 'image/png'\n};\n\n/**\n* Class for interacting with DICOMweb RESTful services.\n*/\nclass DICOMwebClient {\n\n  /**\n  * @constructor\n  * @param {Object} options (choices: \"url\", \"username\", \"password\", \"headers\")\n  */\n  constructor(options) {\n\n    this.baseURL = options.url;\n    if (!this.baseURL) {\n      console.error('no DICOMweb base url provided - calls will fail')\n    }\n\n    if ('username' in options) {\n      this.username = options.username;\n      if (!('password' in options)) {\n        console.error('no password provided to authenticate with DICOMweb service')\n      }\n      this.password = options.password;\n    }\n\n    if ('qidoURLPrefix' in options) {\n      console.log(`use URL prefix for QIDO-RS: ${options.qidoURLPrefix}`);\n      this.qidoURL = this.baseURL + '/' + options.qidoURLPrefix;\n    } else {\n      this.qidoURL = this.baseURL;\n    }\n\n    if ('wadoURLPrefix' in options) {\n      console.log(`use URL prefix for WADO-RS: ${options.wadoURLPrefix}`);\n      this.wadoURL = this.baseURL + '/' + options.wadoURLPrefix;\n    } else {\n      this.wadoURL = this.baseURL;\n    }\n\n    if ('stowURLPrefix' in options) {\n      console.log(`use URL prefix for STOW-RS: ${options.stowURLPrefix}`);\n      this.stowURL = this.baseURL + '/' + options.stowURLPrefix;\n    } else {\n      this.stowURL = this.baseURL;\n    }\n\n    this.headers = options.headers || {};\n  }\n\n  static _parseQueryParameters(params={}) {\n    let queryString = '?';\n    Object.keys(params).forEach(function (key, index) {\n      if (index !== 0) {\n        queryString += '&'\n      }\n      queryString += key + '=' + encodeURIComponent(params[key]);\n    });\n    return queryString\n  }\n\n  _httpRequest(url, method, headers, options={}) {\n    return new Promise( (resolve, reject) => {\n      const request = new XMLHttpRequest();\n      request.open(method, url, true);\n      if ('responseType' in options) {\n        request.responseType = options.responseType;\n      }\n\n      if (typeof(headers) === 'object') {\n        Object.keys(headers).forEach(function (key) {\n          request.setRequestHeader(key, headers[key]);\n        });\n      }\n\n      // now add custom headers from the user\n      // (e.g. access tokens)\n      const userHeaders = this.headers;\n      Object.keys(userHeaders).forEach(function (key) {\n        request.setRequestHeader(key, userHeaders[key]);\n      });\n\n      // Event triggered when upload starts\n      request.onloadstart = function (event) {\n        //console.log('upload started: ', url)\n      };\n\n      // Event triggered when upload ends\n      request.onloadend = function (event) {\n        //console.log('upload finished')\n      };\n\n      // Handle response message\n      request.onreadystatechange = function (event) {\n        if (request.readyState === 4) {\n          if (request.status === 200) {\n            resolve(request.response);\n          } else if (request.status === 202) {\n            console.warn('some resources already existed: ', request);\n            resolve(request.response);\n          } else if (request.status === 204) {\n            console.warn('empty response for request: ', request);\n            resolve([]);\n          } else {\n            console.error('request failed: ', request);\n            const error = new Error('request failed');\n            error.request = request;\n            error.response = request.response;\n            error.status = request.status;\n            console.error(error);\n            console.error(error.response);\n\n            reject(error);\n          }\n        }\n      };\n\n      // Event triggered while download progresses\n      if ('progressCallback' in options) {\n        if (typeof(options.progressCallback) === 'function') {\n          request.onprogress = options.progressCallback;\n        }\n      }\n\n      // request.onprogress = function (event) {\n      //   const loaded = progress.loaded;\n      //   let total;\n      //   let percentComplete;\n      //   if (progress.lengthComputable) {\n      //     total = progress.total;\n      //     percentComplete = Math.round((loaded / total) * 100);\n      //   j\n      //   // console.log('download progress: ', percentComplete, ' %');\n      //   return(percentComplete);\n      // };\n\n      if ('data' in options) {\n        request.send(options.data);\n      } else {\n        request.send();\n      }\n    });\n  }\n\n  _httpGet(url, headers, responseType, progressCallback) {\n    return this._httpRequest(url, 'get', headers, {responseType, progressCallback});\n  }\n\n  _httpGetApplicationJson(url, params={}, progressCallback) {\n    if (typeof(params) === 'object') {\n      if (!isEmptyObject(params)) {\n          url += DICOMwebClient._parseQueryParameters(params)\n      }\n    }\n    const headers = {'Accept': MIMETYPES.DICOM_JSON};\n    const responseType = 'json';\n    return this._httpGet(url, headers, responseType, progressCallback);\n  }\n\n  _httpGetByMimeType(url, mimeType, params, responseType='arraybuffer', progressCallback) {\n    if (typeof(params) === 'object') {\n      if (!isEmptyObject(params)) {\n        url += DICOMwebClient._parseQueryParameters(params)\n      }\n    }\n\n    const headers = {\n      'Accept': `multipart/related; type=\"${mimeType}\"`\n    };\n\n    return this._httpGet(url, headers, responseType, progressCallback);\n  }\n\n  _httpPost(url, headers, data, progressCallback) {\n    return this._httpRequest(url, 'post', headers, {data, progressCallback});\n  }\n\n  _httpPostApplicationJson(url, data, progressCallback) {\n    const headers = {'Content-Type': MIMETYPES.DICOM_JSON};\n    return this._httpPost(url, headers, data, progressCallback);\n  }\n\n  /**\n   * Searches for DICOM studies.\n   * @param {Object} options options object\n   * @return {Array} study representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2)\n   */\n  searchForStudies(options={}) {\n    console.log('search for studies');\n    let url = this.qidoURL +\n              '/studies';\n    if ('queryParams' in options) {\n        url += DICOMwebClient._parseQueryParameters(options.queryParams);\n    }\n    return(this._httpGetApplicationJson(url));\n  }\n\n  /**\n   * Retrieves metadata for a DICOM study.\n   * @param {Object} options options object\n   * @returns {Array} metadata elements in DICOM JSON format for each instance belonging to the study\n   */\n  retrieveStudyMetadata(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required for retrieval of study metadata')\n    }\n    console.log(`retrieve metadata of study ${options.studyInstanceUID}`);\n    const url = this.wadoURL +\n              '/studies/' + options.studyInstanceUID +\n              '/metadata';\n    return(this._httpGetApplicationJson(url));\n  }\n\n  /**\n   * Searches for DICOM series.\n   * @param {Object} options options object\n   * @returns {Array} series representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2a)\n   */\n  searchForSeries(options={}) {\n    let url = this.qidoURL;\n    if ('studyInstanceUID' in options) {\n      console.log(`search series of study ${options.studyInstanceUID}`);\n      url += '/studies/' + options.studyInstanceUID;\n    }\n    url += '/series';\n    if ('queryParams' in options) {\n        url += DICOMwebClient._parseQueryParameters(options.queryParams);\n    }\n    return(this._httpGetApplicationJson(url));\n  }\n\n  /**\n   * Retrieves metadata for a DICOM series.\n   * @param {Object} options options object\n   * @returns {Array} metadata elements in DICOM JSON format for each instance belonging to the series\n   */\n  retrieveSeriesMetadata(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required for retrieval of series metadata')\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error('Series Instance UID is required for retrieval of series metadata')\n    }\n\n    console.log(`retrieve metadata of series ${options.seriesInstanceUID}`);\n    const url = this.wadoURL +\n      '/studies/' + options.studyInstanceUID +\n      '/series/' + options.seriesInstanceUID +\n      '/metadata';\n    return(this._httpGetApplicationJson(url));\n  }\n\n  /**\n   * Searches for DICOM instances.\n   * @param {Object} options options object\n   * @returns {Array} instance representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2b)\n   */\n  searchForInstances(options={}) {\n    let url = this.qidoURL;\n    if ('studyInstanceUID' in options) {\n      url += '/studies/' + options.studyInstanceUID;\n      if ('seriesInstanceUID' in options) {\n        console.log(`search for instances of series ${options.seriesInstanceUID}`);\n        url += '/series/' + options.seriesInstanceUID;\n      } else {\n        console.log(`search for instances of study ${options.studyInstanceUID}`);\n      }\n    } else {\n     console.log('search for instances');\n    }\n    url += '/instances';\n    if ('queryParams' in options) {\n        url += DICOMwebClient._parseQueryParameters(options.queryParams);\n    }\n    return(this._httpGetApplicationJson(url));\n  }\n\n  /** Returns a WADO-URI URL for an instance\n   * @param {Object} options options object\n   * @returns {String} WADO-URI URL\n   */\n  buildInstanceWadoURIUrl(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required.')\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error('Series Instance UID is required.')\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error('SOP Instance UID is required.')\n    }\n\n    const contentType = options.contentType || MIMETYPES.DICOM;\n    const transferSyntax = options.transferSyntax || '*';\n    const params = [];\n\n    params.push('requestType=WADO');\n    params.push(`studyUID=${options.studyInstanceUID}`);\n    params.push(`seriesUID=${options.seriesInstanceUID}`);\n    params.push(`objectUID=${options.sopInstanceUID}`);\n    params.push(`contentType=${contentType}`);\n    params.push(`transferSyntax=${transferSyntax}`);\n\n    const paramString = params.join('&');\n\n    return `${this.wadoURL}?${paramString}`;\n  }\n\n  /**\n   * Retrieves metadata for a DICOM instance.\n   *\n   * @param {Object} options object\n   * @returns {Object} metadata elements in DICOM JSON format\n   */\n  retrieveInstanceMetadata(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required for retrieval of instance metadata')\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error('Series Instance UID is required for retrieval of instance metadata')\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error('SOP Instance UID is required for retrieval of instance metadata')\n    }\n    console.log(`retrieve metadata of instance ${options.sopInstanceUID}`);\n    const url = this.wadoURL +\n      '/studies/' + options.studyInstanceUID +\n      '/series/' + options.seriesInstanceUID +\n      '/instances/' + options.sopInstanceUID +\n      '/metadata';\n\n    return this._httpGetApplicationJson(url);\n  }\n\n  /**\n   * Retrieves frames for a DICOM instance.\n   * @param {Object} options options object\n   * @returns {Array} frame items as byte arrays of the pixel data element\n   */\n  retrieveInstanceFrames(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required for retrieval of instance frames')\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error('Series Instance UID is required for retrieval of instance frames')\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error('SOP Instance UID is required for retrieval of instance frames')\n    }\n    if (!('frameNumbers' in options)) {\n      throw new Error('frame numbers are required for retrieval of instance frames')\n    }\n    console.log(`retrieve frames ${options.frameNumbers.toString()} of instance ${options.sopInstanceUID}`)\n    const url = this.wadoURL +\n      '/studies/' + options.studyInstanceUID +\n      '/series/' + options.seriesInstanceUID +\n      '/instances/' + options.sopInstanceUID +\n      '/frames/' + options.frameNumbers.toString();\n\n    const mimeType = options.mimeType ? `${options.mimeType}` : MIMETYPES.OCTET_STREAM;\n\n    return this._httpGetByMimeType(url, mimeType).then(multipartDecode);\n  }\n\n  /**\n   * Retrieves rendered frames for a DICOM instance.\n   * @param {Object} options options object\n   * @returns {Array} frame items as byte arrays of the pixel data element\n   */\n  retrieveInstanceFramesRendered(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required for retrieval of rendered instance frames')\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error('Series Instance UID is required for retrieval of rendered instance frames')\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error('SOP Instance UID is required for retrieval of rendered instance frames')\n    }\n    if (!('frameNumbers' in options)) {\n      throw new Error('frame numbers are required for retrieval of rendered instance frames')\n    }\n\n    console.log(`retrieve rendered frames ${options.frameNumbers.toString()} of instance ${options.sopInstanceUID}`)\n    const url = this.wadoURL +\n      '/studies/' + options.studyInstanceUID +\n      '/series/' + options.seriesInstanceUID +\n      '/instances/' + options.sopInstanceUID +\n      '/frames/' + options.frameNumbers.toString() +\n      '/rendered';\n\n    let headers = {};\n    // The choice of an acceptable media type depends on a variety of things:\n    // http://dicom.nema.org/medical/dicom/current/output/chtml/part18/chapter_6.html#table_6.1.1-3\n    if ('mimeType' in options) {\n      headers['Accept'] = options.mimeType;\n    }\n\n    const responseType = 'arraybuffer';\n    return this._httpGet(url, headers, responseType);\n  }\n\n  /**\n   * Retrieves a DICOM instance.\n   * @param {Object} options options object\n   * @returns {Arraybuffer} DICOM Part 10 file as Arraybuffer\n   */\n  retrieveInstance(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required')\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error('Series Instance UID is required')\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error('SOP Instance UID is required')\n    }\n    const url = this.wadoURL +\n      '/studies/' + options.studyInstanceUID +\n      '/series/' + options.seriesInstanceUID +\n      '/instances/' + options.sopInstanceUID;\n\n    return this._httpGetByMimeType(url, MIMETYPES.DICOM)\n        .then(multipartDecode)\n        .then(getFirstResult);\n  }\n\n  /**\n   * Retrieves a set of DICOM instance for a series.\n   * @param {Object} options options object\n   * @returns {Arraybuffer[]} Array of DICOM Part 10 files as Arraybuffers\n   */\n  retrieveSeries(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required')\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error('Series Instance UID is required')\n    }\n    const url = this.wadoURL +\n      '/studies/' + options.studyInstanceUID +\n      '/series/' + options.seriesInstanceUID;\n\n    return this._httpGetByMimeType(url, MIMETYPES.DICOM).then(multipartDecode);\n  }\n\n  /**\n   * Retrieves a set of DICOM instance for a study.\n   * @param {Object} options options object\n   * @returns {Arraybuffer[]} Array of DICOM Part 10 files as Arraybuffers\n   */\n  retrieveStudy(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required')\n    }\n\n    const url = this.wadoURL +\n      '/studies/' + options.studyInstanceUID;\n\n    return this._httpGetByMimeType(url, MIMETYPES.DICOM).then(multipartDecode);\n  }\n\n  /**\n   * Retrieves and parses BulkData from a BulkDataURI location.\n   * Decodes the multipart encoded data and returns the resulting data\n   * as an ArrayBuffer.\n   *\n   * See http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.5.5.html\n   *\n   * @param {Object} options options object\n   * @return {Promise}\n   */\n  retrieveBulkData(options) {\n    if (!('BulkDataURI' in options)) {\n      throw new Error('BulkDataURI is required.');\n    }\n\n    return this._httpGetByMimeType(options.BulkDataURI, MIMETYPES.OCTET_STREAM)\n      .then(multipartDecode)\n      .then(getFirstResult);\n  }\n\n  /**\n   * Stores DICOM instances.\n   *\n   * @param {Object} options options object\n   */\n  storeInstances(options) {\n    if (!('datasets' in options)) {\n      throw new Error('datasets are required for storing')\n    }\n\n    let url = `${this.stowURL}/studies`;\n    if ('studyInstanceUID' in options) {\n      url += `/${options.studyInstanceUID}`;\n    }\n\n    const { data, boundary } = multipartEncode(options.datasets);\n    const headers = {\n      'Content-Type': `multipart/related; type=application/dicom; boundary=${boundary}`\n    };\n\n    return this._httpPost(url, headers, data, options.progressCallback);\n  }\n}\n\nexport { DICOMwebClient };\n","function findSubstring(str, before, after) {\n    const beforeIndex = str.lastIndexOf(before) + before.length;\n    if (beforeIndex < before.length) {\n        return(null);\n    }\n    if (after !== undefined) {\n        const afterIndex = str.lastIndexOf(after);\n        if (afterIndex < 0) {\n            return(null);\n        } else{\n            return(str.substring(beforeIndex, afterIndex));\n        }\n    }\n    return(str.substring(beforeIndex));\n}\n\n\nfunction getStudyInstanceUIDFromUri(uri) {\n  let uid = findSubstring(uri, \"studies/\", \"/series\");\n  if (!uid) {\n    uid = findSubstring(uri, \"studies/\");\n  }\n  if (!uid) {\n    console.debug('Study Instance UID could not be dertermined from URI \"' + uri + '\"');\n  }\n  return(uid);\n}\n\n\nfunction getSeriesInstanceUIDFromUri(uri) {\n  let uid = findSubstring(uri, \"series/\", \"/instances\");\n  if (!uid) {\n    uid = findSubstring(uri, \"series/\");\n  }\n  if (!uid) {\n    console.debug('Series Instance UID could not be dertermined from URI \"' + uri + '\"');\n  }\n  return(uid);\n}\n\n\nfunction getSOPInstanceUIDFromUri(uri) {\n  let uid = findSubstring(uri, \"/instances/\", \"/frames\");\n  if (!uid) {\n    uid = findSubstring(uri, \"/instances/\", \"/metadata\");\n  }\n  if (!uid) {\n    uid = findSubstring(uri, \"/instances/\");\n  }\n  if (!uid) {\n    console.debug('SOP Instance UID could not be dertermined from URI\"' + uri + '\"');\n  }\n  return(uid);\n}\n\n\nfunction getFrameNumbersFromUri(uri) {\n  let numbers = findSubstring(uri, \"/frames/\", \"/rendered\");\n  if (!numbers) {\n    numbers = findSubstring(uri, \"/frames/\");\n  }\n  if (numbers === undefined) {\n    console.debug('Frames Numbers could not be dertermined from URI\"' + uri + '\"');\n  }\n  return(numbers.split(','));\n}\n\nexport {\n  getStudyInstanceUIDFromUri,\n  getSeriesInstanceUIDFromUri,\n  getSOPInstanceUIDFromUri,\n  getFrameNumbersFromUri,\n};\n","export default '0.3.2';\n","import { DICOMwebClient } from './api.js';\nimport { \n  getStudyInstanceUIDFromUri, getSeriesInstanceUIDFromUri,\n  getSOPInstanceUIDFromUri, getFrameNumbersFromUri\n} from './utils.js';\n\nlet api = {\n  DICOMwebClient,\n};\nlet utils = {\n  getStudyInstanceUIDFromUri,\n  getSeriesInstanceUIDFromUri,\n  getSOPInstanceUIDFromUri,\n  getFrameNumbersFromUri\n};\n\nexport { default as version } from './version.js';\n\nexport { api, utils };\n"],"names":["uint8ArrayToString","arr","offset","limit","length","str","i","String","fromCharCode","stringToUint8Array","Uint8Array","j","charCodeAt","identifyBoundary","header","parts","split","substr","containsToken","message","token","index","findToken","maxSearchLength","searchLength","Math","min","multipartEncode","datasets","boundary","guid","contentType","contentTypeString","footer","headerArray","footerArray","headerLength","footerLength","contentArrays","map","datasetBuffer","contentArray","contentLength","multipartArray","set","position","forEach","data","buffer","multipartDecode","response","separator","headerIndex","Error","boundaryString","boundaryLength","components","boundaryIndex","spacingLength","slice","push","s4","floor","random","toString","substring","isEmptyObject","obj","Object","keys","constructor","getFirstResult","result","MIMETYPES","DICOM","DICOM_JSON","OCTET_STREAM","JPEG","PNG","DICOMwebClient","options","baseURL","url","console","error","username","password","log","qidoURLPrefix","qidoURL","wadoURLPrefix","wadoURL","stowURLPrefix","stowURL","headers","method","Promise","resolve","reject","request","XMLHttpRequest","open","responseType","key","setRequestHeader","userHeaders","onloadstart","event","onloadend","onreadystatechange","readyState","status","warn","progressCallback","onprogress","send","_httpRequest","params","_parseQueryParameters","_httpGet","mimeType","_httpPost","queryParams","_httpGetApplicationJson","studyInstanceUID","seriesInstanceUID","transferSyntax","sopInstanceUID","paramString","join","frameNumbers","_httpGetByMimeType","then","BulkDataURI","queryString","encodeURIComponent","findSubstring","before","after","beforeIndex","lastIndexOf","undefined","afterIndex","getStudyInstanceUIDFromUri","uri","uid","debug","getSeriesInstanceUIDFromUri","getSOPInstanceUIDFromUri","getFrameNumbersFromUri","numbers","api","utils"],"mappings":"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"}